version: "3.2"
services:

  demo:
    build: #启动服务时先将build下的Dockerfile文件构建镜像,再运行镜像
      context: ./dockerfile #指定Dockerfile的路径
      dockerfile: Dockerfile #指定Dockerfile文件名
    container_name: demo #--name
    ports:
      - "8082:8081"
    networks:
      - hello
    depends_on:
      - tomcat01

  tomcat01:
    container_name: tomcat01 #--name
    image: tomcat:8.0-jre8
    ports: # map container port 8080 to host port 8080
      - "8080:8080"
    volumes:
      # - /home/jy/Desktop/apps:/usr/local/tomcat/webapps
      - tomcatwebapps01:/usr/local/tomcat/webapps
    networks:
      - hello
    depends_on: #代表这个容器依赖于mysql和redis后才能启动
      - tomcat02
      - mysql
      - redis
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080" ]
      interval: 10s  # 间隔时间
      timeout: 5s # 超时时间
      retries: 3  # 重试次数
    ulimits:
      nproc: 65535 # 最大进程数
      nofile:
        soft: 65535 # 最大打开文件数
        hard: 65535 # 最大打开文件数

  tomcat02:
    container_name: tomcat02 #--name
    image: tomcat:8.0-jre8
    ports: # map container port 8080 to host port 8080
      - "8081:8080"
    volumes:
      # - /home/jy/Desktop/apps:/usr/local/tomcat/webapps
      - tomcatwebapps02:/usr/local/tomcat/webapps
    networks:
      - hello

  mysql:
    image: mysql:5.7.32
    container_name: mysql
    ports:
      - "3307:3306"
    volumes:
      - mysqldata:/var/lib/mysql
      - mysqlconf:/etc/mysql
    #    environment:
    #      - MYSQL_ROOT_PASSWORD=root
    env_file:
      - mysql.env
    networks:
      - hello

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    command: "redis-server --appendonly yes"
    networks:
      - hello


volumes:
  tomcatwebapps01: #使用的卷
  tomcatwebapps02:
  #external: true #声明外部卷，docker-compose.yml文件中定义的卷
  mysqldata:
  mysqlconf:
  redisdata:

networks:
  hello: #创建网络
  #external:
  #true
